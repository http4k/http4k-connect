buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id "com.github.kt3k.coveralls" version "2.10.1"
    id "com.jfrog.bintray" version "1.8.4"
}

allprojects {

    repositories {
        mavenCentral()
        jcenter()
    }

    apply plugin: "kotlin"
    apply plugin: "jacoco"
    apply plugin: "com.github.kt3k.coveralls"
    apply plugin: "com.jfrog.bintray"
    apply plugin: "maven"
    apply plugin: "maven-publish"

    dependencies {
        implementation platform("org.http4k:http4k-bom:$http4k_version")
        implementation platform("dev.forkhandles:forkhandles-bom:$forkhandles_version")
        api("org.http4k:http4k-core")
        api("dev.forkhandles:result4k")

        testImplementation platform("org.junit:junit-bom:$junit_version")
        testImplementation platform("org.testcontainers:testcontainers-bom:$testcontainers_version")
        testImplementation("org.http4k:http4k-testing-hamkrest")
        testImplementation("org.http4k:http4k-cloudnative")

        testImplementation("org.junit.jupiter:junit-jupiter-api")
        testImplementation("org.junit.jupiter:junit-jupiter-engine")
        testImplementation("org.testcontainers:junit-jupiter")
        testImplementation("org.testcontainers:testcontainers")
    }

    dependencies {
        if (project.name.endsWith("core-fake")) {
            api project(":http4k-connect-core")
        } else if (project.name.endsWith("fake")) {
            api project(":http4k-connect-core-fake")
            api project(":${project.name.substring(0, project.name.length() - 5)}")
            testImplementation project(path: ":${project.name.substring(0, project.name.length() - 5)}", configuration: "testArtifacts")
            testImplementation project(path: ":http4k-connect-core-fake", configuration: "testArtifacts")
        } else if (project.name.startsWith("http4k-connect-storage")) {
            api project(":http4k-connect-core-fake")
            testImplementation project(path: ":http4k-connect-core-fake", configuration: "testArtifacts")
        } else if (project.name == "http4k-connect") {
            rootProject.subprojects.forEach {
                testImplementation project(it.name)
            }
        } else if (project.name == "http4k-connect-bom") {
            // bom - no code
        } else if (project.name != "http4k-connect-core") {
            api project(":http4k-connect-core")
            testImplementation project(path: ":http4k-connect-core-fake", configuration: "testArtifacts")
        }
    }

    jacoco {
        toolVersion = "0.8.3"
    }

    compileKotlin.kotlinOptions.jvmTarget = "1.8"
    compileTestKotlin.kotlinOptions.jvmTarget = "1.8"

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    version = project.hasProperty("releaseVersion") ? project.releaseVersion : "LOCAL"
    group = "org.http4k"
    description = project.name

    test {
        useJUnitPlatform()
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = "sources"
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = "javadoc"
        from javadoc.destinationDir
    }

    task testJar(type: Jar) {
        classifier "test"
        from sourceSets.test.output
    }

    configurations {
        testArtifacts.extendsFrom testRuntime
    }

    artifacts {
        testArtifacts testJar
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId = archivesBaseName

                pom.withXml {
                    asNode().appendNode("name", archivesBaseName)
                    asNode().appendNode("description", description)
                    asNode().appendNode("url", "https://http4k.org")
                    asNode().appendNode("developers")
                        .appendNode("developer").appendNode("name", "David Denton").parent().appendNode("email", "david@http4k.org")
                        .parent().parent()
                        .appendNode("developer").appendNode("name", "Albert Latacz").parent().appendNode("email", "albert@http4k.org")
                        .parent().parent()
                        .appendNode("developer").appendNode("name", "Ivan Sanchez").parent().appendNode("email", "ivan@http4k.org")
                    asNode().appendNode("scm").
                        appendNode("url", "git@github.com:http4k/http4k-connect.git").parent().
                        appendNode("connection", "scm:git:git@github.com:http4k/http4k-connect.git").parent().
                        appendNode("developerConnection", "scm:git:git@github.com:http4k/http4k-connect.git")
                    asNode().appendNode("licenses").appendNode("license").
                        appendNode("name", "Apache License, Version 2.0").parent().
                        appendNode("url", "http://www.apache.org/licenses/LICENSE-2.0.html")
                }
                from components.java

                artifact sourcesJar
                artifact javadocJar
            }
        }
    }

    bintray {
        user = System.getenv("BINTRAY_USER")
        key = System.getenv("BINTRAY_KEY")

        publications = ["mavenJava"]
        dryRun = false
        publish = true
        pkg {
            repo = "maven"
            userOrg = "http4k"
            name = project.name

            desc = description
            websiteUrl = "https://http4k.org"
            issueTrackerUrl = "https://github.com/http4k/http4k-connect/issues"
            vcsUrl = "https://github.com/http4k/http4k-connect.git"
            licenses = ["Apache-2.0"]
            labels = []
            publicDownloadNumbers = true
            version {
                name = project.version
                vcsTag = project.version
                gpg {
                    sign = true
                }
                mavenCentralSync {
                    sync = false
                    user = System.getenv("SONATYPE_USER")
                    password = System.getenv("SONATYPE_KEY")
                    close = "1"
                }
            }
        }
    }

    jacocoTestReport {
        reports {
            xml.enabled = true
        }
    }

    jar {
        manifest {
            attributes "Implementation-Title": project.name,
                "Implementation-Vendor": "org.http4k",
                "Implementation-Version": project.version
        }
    }

    sourceSets {
        test {
            kotlin {
                srcDirs "src/examples/kotlin"
            }
        }
    }
}

compileTestKotlin.kotlinOptions {
    jvmTarget = "1.8"
    freeCompilerArgs += "-Xjvm-default=enable"
}

coveralls {
    sourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs).files.absolutePath
    jacocoReportPath = file("${buildDir}/reports/jacoco/test/jacocoRootReport.xml")
}

task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    dependsOn = subprojects.test
    getSourceDirectories().from(subprojects.sourceSets.main.allSource.srcDirs)
    getClassDirectories().from(subprojects.sourceSets.main.output)
    getExecutionData().from(subprojects.findAll { it.name != "http4k-connect-bom" }.jacocoTestReport.executionData)

    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
        xml.destination = file("${buildDir}/reports/jacoco/test/jacocoRootReport.xml")
    }
}

tasks["bintrayUpload"].onlyIf { false }

tasks.create("listProjects") {
    doLast {
        subprojects
            .findAll { !it.name.contains("kms")} // temporary
            .findAll { !it.name.contains("systemsmanager")} // temporary
            .forEach { println(it.name) }
    }
}
