import java.text.DecimalFormat

buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath Libs.kotlin_gradle_plugin
        classpath Libs.org_jetbrains_dokka_gradle_plugin
        classpath Libs.io_codearte_nexus_staging_gradle_plugin
        classpath Libs.com_github_kt3k_coveralls_gradle_plugin
        classpath Libs.com_google_devtools_ksp_com_google_devtools_ksp_gradle_plugin
    }
}

apply plugin: "io.codearte.nexus-staging"

allprojects {
    repositories {
        mavenCentral()
    }

    apply(plugin: "kotlin")
    apply(plugin: "kotlin-kapt")
    apply(plugin: "jacoco")
    apply(plugin: "org.jetbrains.dokka")
    apply(plugin: "com.github.kt3k.coveralls")
    apply(plugin: "com.google.devtools.ksp")

    dependencies {
        implementation(platform("org.http4k:http4k-bom:$http4k_version")) // manually set because of auto-upgrading
        implementation(platform(Libs.forkhandles_bom))
        api(Http4k.core)
        api(libs.result4k)

        testImplementation(platform(Libs.junit_bom))
        testImplementation(Http4k.testing.hamkrest)
        testImplementation(Http4k.testing.approval)

        testImplementation(Testing.junit.jupiter.api)
        testImplementation(Testing.junit.jupiter.engine)
        testImplementation(platform(Libs.testcontainers_bom))
        testImplementation(Testing.junit.jupiter.params)
        testImplementation(libs.junit.jupiter)
        testImplementation(libs.testcontainers)

        dokkaHtmlPlugin(Libs.org_jetbrains_dokka_gradle_plugin)

        if (project.name.endsWith("core-fake")) {
            api(project(":http4k-connect-core"))
        } else if (project.name.endsWith("fake")) {
            api(project(":http4k-connect-core-fake"))
            api(project(":${project.name.substring(0, project.name.length() - 5)}"))
            testImplementation(project(path: ":${project.name.substring(0, project.name.length() - 5)}", configuration: "testArtifacts"))
            testImplementation(project(path: ":http4k-connect-core-fake", configuration: "testArtifacts"))
        } else if (project.name.startsWith("http4k-connect-storage-core")) {
            // bom - no code
        } else if (project.name.startsWith("http4k-connect-storage")) {
            api(project(":http4k-connect-storage-core"))
            testImplementation(project(path: ":http4k-connect-core-fake", configuration: "testArtifacts"))
            testImplementation(project(path: ":http4k-connect-storage-core", configuration: "testArtifacts"))
        } else if (project.name == "http4k-connect") {
            rootProject.subprojects.forEach {
                testImplementation(project(it.name))
            }
        } else if (project.name == "http4k-connect-bom") {
            // bom - no code
        } else if (project.name == "http4k-connect-kapt-generator") {
            api(project(":http4k-connect-core"))
        } else if (project.name == "http4k-connect-ksp-generator") {
            api(project(":http4k-connect-core"))
            kspTest(project(":http4k-connect-ksp-generator"))
        } else if (project.name != "http4k-connect-core") {
            api(Http4k.cloudnative)
            api(project(":http4k-connect-core"))
            ksp(project(":http4k-connect-ksp-generator"))
            testImplementation(project(path: ":http4k-connect-core-fake", configuration: "testArtifacts"))
        }
    }

    compileKotlin.kotlinOptions.jvmTarget = "1.8"
    compileTestKotlin.kotlinOptions.jvmTarget = "1.8"

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    version = project.hasProperty("releaseVersion") ? project.releaseVersion : "LOCAL"
    group = "org.http4k"
    description = project.name

    test {
        useJUnitPlatform()
    }

    jacoco {
        toolVersion = "0.8.7"
    }

    if (hasCodeCoverage(project)) {
        jacocoTestReport {
            reports {
                html.enabled = true
                xml.enabled = true
            }
            afterEvaluate {
                classDirectories.setFrom(files(classDirectories.files.collect {
                    fileTree(dir: it, exclude: "**/Kotshi**/**")
                    fileTree(dir: it, exclude: "**/**Extensions**")
                }))
            }
        }
    }

    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }

}

subprojects {

    kotlin {
        sourceSets {
            main.kotlin.srcDirs += 'build/generated/ksp/main/kotlin'

            test.kotlin.srcDirs += 'src/examples/kotlin'
            test.kotlin.srcDirs += 'build/generated/ksp/test/kotlin'
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier = "sources"
        from sourceSets.main.allSource
    }

    jar {
        manifest {
            attributes "Implementation-Title": project.name,
                "Implementation-Vendor": "org.http4k",
                "Implementation-Version": project.version
        }
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        archiveClassifier = "javadoc"
        from javadoc.destinationDir
    }

    task testJar(type: Jar) {
        classifier "test"
        from sourceSets.test.output
    }

    configurations {
        testArtifacts.extendsFrom testRuntime
    }

    artifacts {
        testArtifacts testJar
    }

    def enableSigning = project.findProperty("sign") == "true"

    apply(plugin: "maven-publish")

    if (enableSigning) { // when added it expects signing keys to be configured
        apply(plugin: "signing")

        signing {
            def signingKey = findProperty("signingKey")
            def signingPassword = findProperty("signingPassword")

            useInMemoryPgpKeys(signingKey, signingPassword)
            sign publishing.publications
        }
    }

    def nexusUsername = project.findProperty("nexusUsername") ?: "notset"
    def nexusPassword = project.findProperty("nexusPassword") ?: "notset"

    publishing {

        repositories {
            maven {
                name "SonatypeStaging"
                url "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                credentials {
                    username nexusUsername
                    password nexusPassword
                }
            }
            maven {
                name "SonatypeSnapshot"
                url "https://oss.sonatype.org/content/repositories/snapshots/"
                credentials {
                    username nexusUsername
                    password nexusPassword
                }
            }
        }

        publications {
            mavenJava(MavenPublication) {
                artifactId = archivesBaseName

                pom.withXml {
                    asNode().appendNode("name", archivesBaseName)
                    asNode().appendNode("description", description)
                    asNode().appendNode("url", "https://http4k.org")
                    asNode().appendNode("developers")
                        .appendNode("developer").appendNode("name", "David Denton").parent().appendNode("email", "david@http4k.org")
                        .parent().parent()
                        .appendNode("developer").appendNode("name", "Albert Latacz").parent().appendNode("email", "albert@http4k.org")
                        .parent().parent()
                        .appendNode("developer").appendNode("name", "Ivan Sanchez").parent().appendNode("email", "ivan@http4k.org")
                    asNode().appendNode("scm").
                        appendNode("url", "git@github.com:http4k/http4k-connect.git").parent().
                        appendNode("connection", "scm:git:git@github.com:http4k/http4k-connect.git").parent().
                        appendNode("developerConnection", "scm:git:git@github.com:http4k/http4k-connect.git")
                    asNode().appendNode("licenses").appendNode("license").
                        appendNode("name", "Apache License, Version 2.0").parent().
                        appendNode("url", "http://www.apache.org/licenses/LICENSE-2.0.html")
                }
                from components.java

                artifact sourcesJar
                artifact javadocJar
            }
        }
    }
}

coveralls {
    sourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs).files.absolutePath
    jacocoReportPath = file("${buildDir}/reports/jacoco/test/jacocoRootReport.xml")
}

task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    dependsOn = subprojects.test
    getSourceDirectories().from(subprojects.sourceSets.main.allSource.srcDirs)
    getClassDirectories().from(subprojects.sourceSets.main.output)
    getExecutionData()
        .from(
            subprojects.findAll { hasCodeCoverage(it) }
                .jacocoTestReport.executionData
        )

    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
        xml.destination = file("${buildDir}/reports/jacoco/test/jacocoRootReport.xml")
    }
}

tasks.create("listProjects") {
    doLast {
        subprojects.forEach { System.err.println(it.name) }
    }
}

tasks.create("weighDependencies") {
    doLast {
        [rootProject]
            .forEach {
                println it.name.toUpperCase()
                it.configurations
                    .runtimeClasspath
                    .resolvedConfiguration
                    .firstLevelModuleDependencies.forEach {
                    def sorted = it.allModuleArtifacts.toSorted()
                    def sum = sorted.sum { it.file.length() }

                    println "  " + it.name + " = " + (sum ? new DecimalFormat("#.00Mb").format(sum / 1024 / 1000d) : "0Mb")
                    sorted.forEach { println("    " + it.file.name + " = " + it.file.length()) }
                }
            }
    }
}

dependencies {
    subprojects
        .forEach {
            implementation(project(it.name))
        }

    implementation(platform(Libs.bom))
    implementation(libs.cloudfront)
    implementation(libs.cognitoidentityprovider)
    implementation(libs.dynamodb)
    implementation(libs.kms)
    implementation(libs.lambda)
    implementation(libs.s3)
    implementation(libs.secretsmanager)
    implementation(libs.ses)
    implementation(libs.sns)
    implementation(libs.sqs)
    implementation(libs.ssm)
    implementation(libs.sts)
}

static def hasCodeCoverage(project) {
    return project.name != "http4k-connect-bom" &&
        !project.name.endsWith("generator")
}
