import java.text.DecimalFormat

buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id "com.github.kt3k.coveralls" version "2.10.1"
    id "com.jfrog.bintray" version "1.8.4"
    id "org.jetbrains.dokka" version "1.4.20"
    id "io.codearte.nexus-staging" version '0.22.0'
}

apply plugin: 'io.codearte.nexus-staging'

allprojects {

    repositories {
        mavenCentral()
        mavenLocal()
        jcenter() {
            // remove this when exposed migrated to MC
            content {
                includeModule("org.jetbrains.exposed", "exposed-core")
                includeModule("org.jetbrains.exposed", "exposed-jdbc")
            }
        }
    }

    apply plugin: "kotlin"
    apply plugin: "kotlin-kapt"
    apply plugin: "jacoco"
    apply plugin: 'org.jetbrains.dokka'
    apply plugin: "com.github.kt3k.coveralls"

    dependencies {
        implementation(platform("org.http4k:http4k-bom:$http4k_version"))
        implementation(platform("dev.forkhandles:forkhandles-bom:$forkhandles_version"))
        api("org.http4k:http4k-core")
        api("dev.forkhandles:result4k")

        testImplementation(platform("org.junit:junit-bom:$junit_version"))
        testImplementation(platform("org.testcontainers:testcontainers-bom:$testcontainers_version"))
        testImplementation("org.http4k:http4k-testing-hamkrest")
        testImplementation("org.http4k:http4k-testing-approval")
        testImplementation("org.http4k:http4k-cloudnative")

        testImplementation("org.junit.jupiter:junit-jupiter-api")
        testImplementation("org.junit.jupiter:junit-jupiter-engine")
        testImplementation("org.testcontainers:junit-jupiter")
        testImplementation("org.testcontainers:testcontainers")

        if (project.name.endsWith("core-fake")) {
            api(project(":http4k-connect-core"))
        } else if (project.name.endsWith("fake")) {
            api(project(":http4k-connect-core-fake"))
            api(project(":${project.name.substring(0, project.name.length() - 5)}"))
            testImplementation(project(path: ":${project.name.substring(0, project.name.length() - 5)}", configuration: "testArtifacts"))
            testImplementation(project(path: ":http4k-connect-core-fake", configuration: "testArtifacts"))
        } else if (project.name.startsWith("http4k-connect-storage-core")) {
            // bom - no code
        } else if (project.name.startsWith("http4k-connect-storage")) {
            api(project(":http4k-connect-storage-core"))
            testImplementation(project(path: ":http4k-connect-core-fake", configuration: "testArtifacts"))
            testImplementation(project(path: ":http4k-connect-storage-core", configuration: "testArtifacts"))
        } else if (project.name == "http4k-connect") {
            rootProject.subprojects.forEach {
                testImplementation(project(it.name))
            }
        } else if (project.name == "http4k-connect-bom") {
            // bom - no code
        } else if (project.name == "http4k-connect-kapt-generator") {
            api(project(":http4k-connect-core"))
        } else if (project.name != "http4k-connect-core") {
            dokkaHtmlPlugin("org.jetbrains.dokka:kotlin-as-java-plugin:1.4.20")
            api(project(":http4k-connect-core"))
            kapt(project(":http4k-connect-kapt-generator"))
            testImplementation(project(path: ":http4k-connect-core-fake", configuration: "testArtifacts"))
        }
    }

    compileKotlin.kotlinOptions.jvmTarget = "1.8"
    compileTestKotlin.kotlinOptions.jvmTarget = "1.8"

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    version = project.hasProperty("releaseVersion") ? project.releaseVersion : "LOCAL"
    group = "org.http4k"
    description = project.name

    test {
        useJUnitPlatform()
    }

    jacoco {
        toolVersion = "0.8.6"
    }

    if (hasCodeCoverage(project)) {
        jacocoTestReport {
            reports {
                html.enabled = true
                xml.enabled = true
            }
            afterEvaluate {
                classDirectories.setFrom(files(classDirectories.files.collect {
                    fileTree(dir: it, exclude: '**/Kotshi**/**')
                    fileTree(dir: it, exclude: '**/**Extensions**')
                }))
            }
        }
    }

    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }

    dependencies {
        dokkaHtmlPlugin("org.jetbrains.dokka:kotlin-as-java-plugin:1.4.20")
    }
}

subprojects {
    sourceSets {
        main {
            kotlin {
                srcDirs += "build/generated/source/kapt/main"
                srcDirs += "build/generated/source/kaptKotlin/main"
            }
        }
        test {
            kotlin {
                srcDirs "src/examples/kotlin"
            }
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier = "sources"
        from sourceSets.main.allSource
    }

    jar {
        manifest {
            attributes "Implementation-Title": project.name,
                "Implementation-Vendor": "org.http4k",
                "Implementation-Version": project.version
        }
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        archiveClassifier = 'javadoc'
        from javadoc.destinationDir
    }

    task testJar(type: Jar) {
        classifier "test"
        from sourceSets.test.output
    }

    configurations {
        testArtifacts.extendsFrom testRuntime
    }

    artifacts {
        testArtifacts testJar
    }

    def enableSigning = project.findProperty('sign') == "true"

    apply plugin: 'com.jfrog.bintray'
    apply plugin: 'maven-publish' // required to configure bintray
    apply plugin: 'maven' // required to upload to sonatype

    if (enableSigning) { // when added it expects signing keys to be configured
        apply plugin: 'signing'

        signing {
            def signingKey = findProperty("signingKey")
            def signingPassword = findProperty("signingPassword")

            useInMemoryPgpKeys(signingKey, signingPassword)
            sign publishing.publications
        }
    }

    def nexusUsername = project.findProperty('nexusUsername') ?: "notset"
    def nexusPassword = project.findProperty('nexusPassword') ?: "notset"

    publishing {

        repositories {
            maven {
                name 'SonatypeStaging'
                url 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
                credentials {
                    username nexusUsername
                    password nexusPassword
                }
            }
            maven {
                name 'SonatypeSnapshot'
                url 'https://oss.sonatype.org/content/repositories/snapshots/'
                credentials {
                    username nexusUsername
                    password nexusPassword
                }
            }
        }

        publications {
            mavenJava(MavenPublication) {
                artifactId = archivesBaseName

                pom.withXml {
                    asNode().appendNode("name", archivesBaseName)
                    asNode().appendNode("description", description)
                    asNode().appendNode("url", "https://http4k.org")
                    asNode().appendNode("developers")
                        .appendNode("developer").appendNode("name", "David Denton").parent().appendNode("email", "david@http4k.org")
                        .parent().parent()
                        .appendNode("developer").appendNode("name", "Albert Latacz").parent().appendNode("email", "albert@http4k.org")
                        .parent().parent()
                        .appendNode("developer").appendNode("name", "Ivan Sanchez").parent().appendNode("email", "ivan@http4k.org")
                    asNode().appendNode("scm").
                        appendNode("url", "git@github.com:http4k/http4k-connect.git").parent().
                        appendNode("connection", "scm:git:git@github.com:http4k/http4k-connect.git").parent().
                        appendNode("developerConnection", "scm:git:git@github.com:http4k/http4k-connect.git")
                    asNode().appendNode("licenses").appendNode("license").
                        appendNode("name", "Apache License, Version 2.0").parent().
                        appendNode("url", "http://www.apache.org/licenses/LICENSE-2.0.html")
                }
                from components.java

                artifact sourcesJar
                artifact javadocJar
            }
        }
        bintray {
            user = System.getenv("BINTRAY_USER")
            key = System.getenv("BINTRAY_KEY")

            publications = ["mavenJava"]
            dryRun = false
            publish = true
            pkg {
                repo = "maven"
                userOrg = "http4k"
                name = project.name

                desc = description
                websiteUrl = "https://http4k.org"
                issueTrackerUrl = "https://github.com/http4k/http4k-connect/issues"
                vcsUrl = "https://github.com/http4k/http4k-connect.git"
                licenses = ["Apache-2.0"]
                labels = []
                publicDownloadNumbers = true
                version {
                    name = project.version
                    vcsTag = project.version
                    gpg {
                        sign = true
                    }
                    mavenCentralSync {
                        sync = false
                        user = System.getenv("SONATYPE_USER")
                        password = System.getenv("SONATYPE_KEY")
                        close = "1"
                    }
                }
            }
        }
    }
}

coveralls {
    sourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs).files.absolutePath
    jacocoReportPath = file("${buildDir}/reports/jacoco/test/jacocoRootReport.xml")
}

task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    dependsOn = subprojects.test
    getSourceDirectories().from(subprojects.sourceSets.main.allSource.srcDirs)
    getClassDirectories().from(subprojects.sourceSets.main.output)
    getExecutionData()
        .from(
            subprojects.findAll { hasCodeCoverage(it) }
                .jacocoTestReport.executionData
        )

    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
        xml.destination = file("${buildDir}/reports/jacoco/test/jacocoRootReport.xml")
    }
}

tasks["bintrayUpload"].onlyIf { false }

tasks.create("listProjects") {
    doLast {
        subprojects.forEach { System.err.println(it.name) }
    }
}

tasks.create("weighDependencies") {
    doLast {
        [rootProject]
            .forEach {
                println it.name.toUpperCase()
                it.configurations
                    .runtimeClasspath
                    .resolvedConfiguration
                    .firstLevelModuleDependencies.forEach {
                    def sorted = it.allModuleArtifacts.toSorted()
                    def sum = sorted.sum { it.file.length() }

                    println "  " + it.name + " = " + (sum ? new DecimalFormat("#.00Mb").format(sum / 1024 / 1000d) : "0Mb")
                    sorted.forEach { println("    " + it.file.name + " = " + it.file.length()) }
                }
            }
    }
}

dependencies {
    subprojects
        .forEach {
            implementation project(it.name)
        }

    implementation platform("software.amazon.awssdk:bom:$aws_sdk_version")
    implementation "software.amazon.awssdk:cloudfront"
    implementation "software.amazon.awssdk:dynamodb"
    implementation "software.amazon.awssdk:kms"
    implementation "software.amazon.awssdk:lambda"
    implementation "software.amazon.awssdk:s3"
    implementation "software.amazon.awssdk:secretsmanager"
    implementation "software.amazon.awssdk:sns"
    implementation "software.amazon.awssdk:sqs"
    implementation "software.amazon.awssdk:ssm"
    implementation "software.amazon.awssdk:sts"
}

static def hasCodeCoverage(project) {
    return project.name != "http4k-connect-bom" &&
        project.name != "http4k-connect-kapt-adapter"
}
